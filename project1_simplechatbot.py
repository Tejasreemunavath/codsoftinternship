# -*- coding: utf-8 -*-
"""project1_simplechatbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lgWQ6kH5SRxuEvYITMt15JIS2eilFCZa
"""

import numpy as np ##used for numerical computations
import nltk ##library for NLp
import string ## process and handle strings in python
import random ##generates random responses.

f=open('chatbot.txt','r',errors ='ignore')
raw_doc=f.read()
raw_doc=raw_doc.lower()
nltk.download('punkt')#This tokenizer divides a text into a list of sentences by using an unsupervised algorithm
nltk.download('wordnet')#arge lexical database of words, senses, and their semantic relations.
sent_tokens = nltk.sent_tokenize(raw_doc)#coverts doc to sentences
word_tokens =nltk.word_tokenize(raw_doc)#converts doc to words.

"""EXAMPLE OF SENTENCE TOKENS"""

sent_tokens[:2]

"""EXAMPLE OF WORD TOKENS"""

word_tokens[:2]

"""Text preprocessing"""

lemmer = nltk.stem.WordNetLemmatizer()
##Lemmatization is the process of reducing a word to its base or dictionary form, known as the lemma
def LemTokens(tokens):
  return [lemmer.lemmatize(token) for token in tokens]
remove_punct_dict = dict((ord(punct),None) for punct in string.punctuation)
def LemNormalize(text):
  return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))

"""Defining the greeting function"""

GREET_INPUTS= ("Hello"," Hi","Greetings","Whats new?","How are you doing","Hey")
GREET_RESPONSE=["Hello","Hey","Thanks","hi there","i brought info about freedom fighters","hello","Im good and hoping the same","IM glad that you are talking to me"]
def greet(sentence):

    for word in sentence.split():
      if word.lower() in GREET_INPUTS:
        return random.choice(GREET_RESPONSE)

"""RESPONSE GENERATION"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def response(user_response):
  robo1_response=''
  TfidfVec=TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')
  tfidf=TfidfVec.fit_transform(sent_tokens)
  vals= cosine_similarity(tfidf[-1],tfidf)
  idx=vals.argsort()[0][-2]
  flat=vals.flatten()
  flat.sort()
  req_tfidf=flat[-2]
  if(req_tfidf==0):
    robo1_response=robo1_response+"I am Sorry! I dont understand you"
    return robo1_response
  else:
    robo1_response=robo1_response+sent_tokens[idx]
    return robo1_response

flag=True
print("BOT:Hey my name is SAHA. let's start a conversation! Also, if you want to exit any time, just type Bye!")
while(flag==True):
  user_response = input()
  user_response=user_response.lower()
  if(user_response!='bye'):
    if(user_response=='thanks'or user_response=='thankyou'):
      flag=False
      print("Bot:you are welcome..")
    else:
       if(greet(user_response)!=None):
        print("BOT:"+greet(user_response))
       else:
        sent_tokens.append(user_response)
        word_tokens=word_tokens+nltk.word_tokenize(user_response)
        final_words=list(set(word_tokens))
        print("BOT: ",end =" ")
        print(response(user_response))
        sent_tokens.remove(user_response)
  else:
    flag=False
    print("BOT:Goodbye! Take care :)")